datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model user {
    id                 String              @id @default(uuid())
    userName           String              @unique
    email              String?              @unique
    fullName           String?
    password           String?
    verifiedAt         DateTime?
    onlineStatus       Boolean             @default(false)
    avatarUrl          String              @default("")
    bannerUrl          String			   @default("")
    createdAt          DateTime            @default(now())
    updatedAt          DateTime            @updatedAt
    associatedAccounts associatedAccount[] @relation(name: "associatedAccountToUser")
    profile            profile             @relation(name: "profileToUser", fields: [profileID], references: [id])
    profileID          String              @unique
    wonmatches         matches[]           @relation(name: "winner")
    lostmatches        matches[]           @relation(name: "loser")
    notifications      notifications[]     @relation(name: "notificationsToUser")
    achievements       achievements[]      @relation(name: "achievementsToUser")
    sentRequests       friendRequests[]    @relation(name: "senderReq")
    receivedRequests   friendRequests[]    @relation(name: "receiverReq")
    sentFriends        friendStatus[]      @relation(name: "sender")
    receiveFriends     friendStatus[]      @relation(name: "receiver")
    channels           channelUser[]       @relation(name: "channelUserToUser")
    sendDM             directMessage[]     @relation(name: "senderDM")
    receiveDM          directMessage[]     @relation(name: "receiverDM")
    sentmessages       message[]           @relation(name: "messageToUser")
}

model associatedAccount {
    id       String   @id @default(uuid())
    user     user     @relation(name: "associatedAccountToUser", fields: [userID], references: [id])
    userID   String
    provider provider
    email    String?
	providerID String
}

model profile {
    id     String @id @default(uuid())
    user   user?  @relation(name: "profileToUser")
    rating Int  @default(0)
    level  Int  @default(0)
    xp     Int  @default(0)
    coins  Int  @default(0)
}

model matches {
    id          Int      @id @default(autoincrement())
    winner      user     @relation(name: "winner", fields: [winnerID], references: [id])
    winnerID    String
    loser       user     @relation(name: "loser", fields: [loserID], references: [id])
    loserID     String
    winnerScore Int
    loserScore  Int
    date        DateTime @default(now())
    gameMode    String
    ranked      Boolean
}

model notifications {
    id     Int    @id @default(autoincrement())
    user   user   @relation(name: "notificationsToUser", fields: [userID], references: [id])
    userID String
}

model achievements {
    id          Int    @id @default(autoincrement())
    imgUrl      String
    name        String
    description String
    reward      Int
    users       user[] @relation(name: "achievementsToUser")
}

model friendRequests {
    sender     user   @relation(name: "senderReq", fields: [senderID], references: [id])
    senderID   String
    receiver   user   @relation(name: "receiverReq", fields: [receiverID], references: [id])
    receiverID String

    @@id([senderID, receiverID])
}

model friendStatus {
    sender      user         @relation(name: "sender", fields: [senderID], references: [id])
    senderID    String
    receiver    user         @relation(name: "receiver", fields: [receiverID], references: [id])
    receiverID  String
    blockStatus actionStatus
    muteStatus  actionStatus

    @@id([senderID, receiverID])
}

model channel {
    id         String            @id @default(uuid())
    imageUrl   String
    name       String
    password   String?
    visibility channelVisibility
    channels   channelUser[]     @relation(name: "channelTochannelUser")
    message    message[]         @relation(name: "channelTomessage")
}

model channelUser {
    user      user          @relation(name: "channelUserToUser", fields: [userID], references: [id])
    userID    String
    channel   channel       @relation(name: "channelTochannelUser", fields: [channelID], references: [id])
    channelID String
    role      channelRole
    status    channelStatus

    @@id([userID, channelID])
}

model directMessage {
    id         Int       @unique @default(autoincrement())
    sender     user      @relation(name: "senderDM", fields: [senderID], references: [id])
    senderID   String    @unique
    receiver   user      @relation(name: "receiverDM", fields: [receiverID], references: [id])
    receiverID String
    message    message[] @relation(name: "directmessageTomessage")

    @@unique([senderID, receiverID])
}

model message {
    id              Int            @id @default(autoincrement())
    sender          user           @relation(name: "messageToUser", fields: [senderID], references: [id])
    senderID        String
    directmessage   directMessage? @relation(name: "directmessageTomessage", fields: [directmessageID], references: [id])
    directmessageID Int?
    channel         channel?       @relation(name: "channelTomessage", fields: [channelID], references: [id])
    channelID       String?
    content         String
    attachment      attachment?
}

model attachment {
    id        Int      @id @default(autoincrement())
    message   message  @relation(fields: [messageID], references: [id])
    messageID Int      @unique
    name      String
    url       String
    type      fileType
}

enum fileType {
    IMAGE
    VIDEO
    FILE
}

enum provider {
    GOOGLE
    INTRA
    GITHUB
}

enum channelVisibility {
    PRIVATE
    PUBLIC
    PROTECTED
}

enum channelRole {
    OWNER
    ADMINISTRATOR
    MEMBER
}

enum channelStatus {
    FREE
    MUTED
    BANNED
}

enum actionStatus {
    BOTH
    NONE
    SENDER
    RECEIVER
}
